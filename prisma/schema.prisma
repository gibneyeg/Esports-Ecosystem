generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  username      String?   @unique
  email         String?   @unique
  password      String?   // Made optional since Google auth users won't have passwords
  rank          String    @default("Bronze")
  points        Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // NextAuth.js required fields
  name          String?   // For OAuth provider name
  emailVerified DateTime?
  image         String?   // For OAuth provider avatar
  accounts      Account[]
  sessions      Session[]
  createdTournaments Tournament[] @relation("TournamentCreator")
  tournaments        TournamentParticipant[]
  player1Matches Match[] @relation("Player1Matches")
  player2Matches Match[] @relation("Player2Matches")
  wonMatches    Match[] @relation("WonMatches")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tournament {
  id          String      @id @default(uuid())
  name        String
  description String
  imageUrl    String?
  startDate   DateTime
  endDate     DateTime
  prizePool   Float
  maxPlayers  Int
  game        String
  status      TournamentStatus @default(UPCOMING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   User       @relation("TournamentCreator", fields: [userId], references: [id])
  userId      String
  participants TournamentParticipant[]
  brackets    TournamentBracket[]
}

model TournamentParticipant {
  id           String     @id @default(uuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  joinedAt     DateTime   @default(now())

  @@unique([tournamentId, userId])
}

model TournamentBracket {
  id           String     @id @default(uuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String
  round        Int
  position     Int
  matches      Match[]
}

model Match {
  id            String     @id @default(uuid())
  bracket       TournamentBracket @relation(fields: [bracketId], references: [id], onDelete: Cascade)
  bracketId     String
  player1       User?     @relation("Player1Matches", fields: [player1Id], references: [id])
  player1Id     String?
  player2       User?     @relation("Player2Matches", fields: [player2Id], references: [id])
  player2Id     String?
  winner        User?     @relation("WonMatches", fields: [winnerId], references: [id])
  winnerId      String?
  score         String?
  status        MatchStatus @default(PENDING)
  position      Int
  scheduledTime DateTime?
  completedTime DateTime?
}
enum TournamentStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

enum MatchStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}